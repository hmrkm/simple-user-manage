// Code generated by MockGen. DO NOT EDIT.
// Source: communicator.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommunicator is a mock of Communicator interface.
type MockCommunicator struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicatorMockRecorder
}

// MockCommunicatorMockRecorder is the mock recorder for MockCommunicator.
type MockCommunicatorMockRecorder struct {
	mock *MockCommunicator
}

// NewMockCommunicator creates a new mock instance.
func NewMockCommunicator(ctrl *gomock.Controller) *MockCommunicator {
	mock := &MockCommunicator{ctrl: ctrl}
	mock.recorder = &MockCommunicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunicator) EXPECT() *MockCommunicatorMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockCommunicator) Request(ctx context.Context, to string, body interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", ctx, to, body)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockCommunicatorMockRecorder) Request(ctx, to, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockCommunicator)(nil).Request), ctx, to, body)
}
